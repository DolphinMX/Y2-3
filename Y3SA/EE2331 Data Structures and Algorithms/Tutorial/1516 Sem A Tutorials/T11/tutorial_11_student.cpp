// Student name:
// Student ID  :

/* This exercise is on the use of insertion sort and the qsort() function available in the C stdlib.
An unsorted array of registrations will be generated by the program code given to you. The order of records 
is defined by ascending courseCode order and records with the same courseCode records are ordered by 
studentId in decending order.

 You are asked to add your codes to
 1. use qsort() to sort the array by courseCode (ascending) and studentId (descending)
 2. use insertion sort to sort the array by courseCode (ascending) and studentId (descending)
 
 */

#include <iostream>
#include <sstream>	//stringstream
#include <iomanip>  //setw()
#include <cstdlib>


using namespace std;

//----------------------------------------------- class prepared for you

// Course registration information can be represented by a record of <courseCode, studentId>.

class Registration {
    
    // this function is not a member
    friend ostream& operator<<(ostream& os, Registration& r);
    
private:
    string courseCode;
    int studentId;
public:
    // constructors with initialization list
    Registration() : courseCode(""), studentId(0) {};
    Registration(string c, int s) : courseCode(c), studentId(s) {};
    
    // getters for returning private fields
    string getCourseCode() {
        return courseCode;
    }
    
    int getStudentId() {
        return studentId;
    }
    
    // setter
    void registerCourse(string c, int s) {
        courseCode = c;
        studentId = s;
    }
    
    
};


//----------------------------------------------- functions prepared for you
ostream& operator<<(ostream& os, Registration& r)
{
    stringstream s;
    s << r.courseCode << "-" << r.studentId;
    os << s.str();
    return os;
}

void initArray(Registration* A, int n)
{
  
    int j, s , c = 0;
    string prefix[] = {"AC", "BA", "CS", "EE", "GE", "MA"};
    int i = 0;
    while(i < n)
    {
        j = rand() % 6;
        c = rand() % 3 + 2010;
        string ccode = prefix[j] + std::to_string(static_cast<long long>(c));   
        s = rand() % 10 + 50001;
        A[i++].registerCourse(ccode, s);
    }
}

void printArray(Registration* A, int n)
{
    for (int i = 0; i < n; i++)
        cout << setw(15) << A[i] << ",";
    cout << endl;
}

//----------------------------------------------- functions implemented by you

// 1. Define your comparator function for ordering Registration objects.
// 2. Define your insertion sort function 
// 3. Complete the main function




int main()
{
    cout << "Exercise on sorting object arrays" << endl << endl;
    
    int n;
    cout << "Enter number of records: ";  // try values between 40 to 60
    cin >> n;
    
    Registration* A = new Registration[n];
    initArray(A, n);
    cout <<"Unsorted records:"<< endl;
    printArray(A, n);
    
    cout <<"Sorted records with qsort:"<< endl;
    // Add your code to call qsort here
	// ...
    printArray(A, n);


	A = new Registration[n];
    initArray(A, n);
    cout <<"Unsorted records:"<< endl;
    printArray(A, n);
    
    cout <<"Sorted records with insertion sort:"<< endl;
    // Add your code to call insertion sort here
	// ...
    printArray(A, n);
    
    system("pause");
    return 0;
}